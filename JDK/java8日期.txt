jshell

import java.time.*;
import java.time.temporal.*;
import java.time.format.DateTimeFormatter;

/** 1、获取当前时间*/
LocalDate d = LocalDate.now(); // d ==> 2024-04-12
LocalTime t = LocalTime.now(); // t ==> 17:38:15.886884400
LocalDateTime dt = LocalDateTime.now(); // dt ==> 2024-04-12T17:38:51.249192200

/** 2、指定的日期和时间创建*/
d = java.time.LocalDate.of(2022,4,20); // d ==> 2022-04-20
t = java.time.LocalTime.of(15,16,17); // t ==> 15:16:17
dt = java.time.LocalDateTime.of(d,t); // dt ==> 2022-04-20T15:16:17

 d = java.time.LocalDate.parse("2022-04-20"); // d ==> 2022-04-20
 t = java.time.LocalTime.parse("15:16:17"); // t ==> 15:16:17
dt = java.time.LocalDateTime.parse("2022-04-20T15:16:17"); // dt ==> 2022-04-20T15:16:17

/** 3、加减日期*/
dt = LocalDateTime.now();
dt.plusDays(1).minusHours(1); // 加1天减1小时
dt.minusMonths(1); // 减一个月

/** 4、时间调整*/
// withYear, withMonth, withDayOfMonth, withHour, withMinute, withSecond
d = LocalDate.of(2020, 3, 31); // d ==> 2020-03-31
LocalDate d_wm = d.withMonth(4); // d_wm ==> 2020-04-30
// //对时间进行操作，出现跨年、跨月操作时，时间会自动进行转换，比如：2020-03-31调整为4个月得到的结果是2020-04-30，因为4月没有31日。

/** 5、时间调整进阶配合 TemporalAdjusters*/
// dayOfWeekInMonth //它的值为同一个月中每一周的第几天
// firstDayOfMonth //它的值为当月的第一天
// firstDayOfNextMonth //它的值为下月的第一天
// firstDayOfNextYear //它的值为明年的第一天
// firstDayOfYear //它的值为当年的第一天
// firstInMonth //它的值为同一个月中，第一个符合星期几要求的值
// lastDayOfMonth //它的值为当月的最后一天
// lastDayOfYear //它的值为今年的最后一天

// 对指定星期的操作 - DayOfWeek
// lastInMonth //它的值为同一个月中，符合星期几要求的值
// next/previous//将日期向前一周或者向后一周，调整到指定星期几
// nextOrSame/previousOrSame //将日期向前或者向后，调整到指定星期几(如当前日期不存在于调整周的区间内则跨周)，比如调整到周四，如果当天周二，则为本周周四;如果当天周五，则为下周四
     

d = LocalDate.now();
// 明年的第一天
System.out.println(dt.with(TemporalAdjusters.firstDayOfNextYear())); // 2025-01-01T17:43:35.351329100
// 两周后的周五
System.out.println(dt.with(TemporalAdjusters.next(DayOfWeek.FRIDAY)).plusWeeks(1)); // 2024-04-26T17:43:35.351329100

/** 6、时区操作*/
ZonedDateTime zbj = ZonedDateTime.now(); // 默认时区时间
ZonedDateTime zny = ZonedDateTime.now(ZoneId.of("America/New_York"));//指定时区获取当前时间

//atZone时区转换，通过ZoneId指定要转换到的时区
//LocalDateTime转ZonedDateTime
LocalDateTime ldt = LocalDateTime.now();
//2020-04-15T15:16:17+08:00[Asia/Shanghai] 获取吗默认时区
ZonedDateTime zbj = ldt.atZone(ZoneId.systemDefault());
//2020-04-15T03:16:17-04:00[America/New_York]，与美国差12小时
ZonedDateTime zny = ldt.atZone(ZoneId.of("America/New_York"));

//时区转换
//转为指定时区时间
ZonedDateTime zny = ldt.withZoneSameInstant(ZoneId.of("America/New_York"));
//转为当前时区时间
LocalDateTime date = zny.toLocalDateTime();

/** 7、时间戳操作*/
System.currentTimeMillis();                   // 1712915952851 /*毫秒级时间戳*/
Instant now = Instant.now();                // 2024-04-12T09:55:37.588965600Z    /*UTC+0*/
System.out.println(now.getEpochSecond()); // 1712915952 /*秒*/
System.out.println(now.toEpochMilli()); // 1712915952851 /*毫秒级时间戳*/
Instant.ofEpochSecond(value); // 设置秒时间戳
Instant.ofEpochMilli(value); // 设置毫秒时间戳

// 当前时间戳转换为指定时区
Instant ins = Instant.now();
ZonedDateTime zdt = ins.atZone(ZoneId.of("America/New_York"))

// 时间戳转LocalDateTime
LocalDateTime time = LocalDateTime.ofInstant(Instant.ofEpochMilli(systemTime), ZoneId.systemDefault());


/** 8、日期格式化*/
LocalDateTime dt = LocalDateTime .now();
DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
System.out.println(dateTimeFormatter.format(dt));

9、时间差
LocalDate startDate = LocalDate.now();;
LocalDate endDate = LocalDate.now();;
long y = ChronoUnit.YEARS.between(startDate, endDate); //获取两个日期间隔年
long m = ChronoUnit.MONTHS.between(startDate, endDate);//获取两个日期间隔月
long d = ChronoUnit.DAYS.between(startDate, endDate); //获取两个日期间隔天
