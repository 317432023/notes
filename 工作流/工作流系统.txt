一、基础概念
  1.1 流程实例状态(单据状态)
    0)未提交
    1)进行中
    2)已完成

  1.2 流程实例结果 流程实例状态
    0)N/A          未提交
    1)处理中       进行中
    2)通过         已完成
    3)不通过       已完成
    4)取消         未提交
    5)驳回         未提交

  1.3 流程动作
    1.3.1 申请人动作
      1)提交：发起一个流程实例，发起成功后单据状态为进行中，流程实例结果为处理中
      2)撤销：流程发起者可以对流程进行撤销处理，撤销后单据状态为未提交，流程实例结果为取消

    1.3.2 审核人动作
      1)办理：正常流程流转
      2)委派：委派他人处理，将任务提交给其他人处理，其他人处理完毕后，流程将再次回归到本人处(A转给其B审批，B审批后，转给A，A审批后进入下一节点。)
      3)转办：将流程转交至转办人处办理，自己将无需办理(A转给其B审批，B审批后，进入下一节点。)
      4)驳回：将审批重置发送给某节点，重新审批。驳回也叫退回，也可以分退回申请人、退回上一步、任意退回等。
          #退回申请人： 直接把流程退回给申请节点
          #退回上一步： 退回流程上一节点
          #退回任意节点： 退回到流程走过任意一个节点
      5)抄送：将审批结果通知给抄送列表对应的人
      6)跳转：将当前流程实例跳转到任意办理节点
      7)拿回：在当前办理人尚未处理文件前，允许上一节点提交人员执行拿回
      8)催办：可以给当前办理人员发送催办通知消息
      9)加签：允许当前办理人根据需要自行增加当前办理节点的办理人员
      9)减签：在当前办理人操作之前减少办理人
      10)会签：一种联合审批的特殊审批流程，可理解为一种多人投票机制，一个任务需要多个人同时处理，然后汇总多个人的意见，决定流程下一步该如何执行。流程设计时，若会签审批节点中设置多个参与人，流程运行时，会签节点任务需要多人共同处理，然后汇总多人的处理意见，决定会签节点的处理结果。
会签分并行会签和顺序会签两种：
          #并行会签：指同一个审批节点设置多个人，如A、B、C三人，三人会同时收到待办任务，需全部同意之后，审批才可到下一审批节点。
          #顺序会签：指同一个审批节点设置多个人，如A、B、C三人，三人按顺序依次收到待办，即A先审批，A提交后B才能审批，需全部同意之后，审批才可到下一审批节点。（也叫串行会签）
      11)或签：一个流程审批节点里有多个处理人，任意一个人处理后就能进入下一个节点。
          *BPMN2.0规范中提供了bpmn:multiInstanceLoopCharacteristics多实例循环的模型定义，并通过bpmn:completionCondition标签定义多实例完成条件，activiti、flowable、camunda等开源工作流引擎均支持该属性。

二、流程模型
  2.1、流程定义
          英文ProcessDefinition，流程的定义，也就相当于规范。ProcessDefinition也有id，这个id是 {key}-{version}，在部署过程中，会把一个id分配给流程定义。 这个id的格式为{key}-{version}， key和version之间使用连字符连接。
     如果没有提供key， 会在名字的基础自动生成。 生成的key会把所有不是字母和数字的字符替换成下划线。
  2.2、流程实例
          ProcessInstance，每一个流程定义的实施，被称为process instance。 用Java来讲流程定义就是代码中的一个类，而ProcessInstance就是把这个类new了出来，创建了一个实例

三、模块划分

  任务管理
    我的待办
    我的已办
    抄送我的
    
  流程管理
    用户组
    表单设计(动态表单)
    流程设计
    我的流程

四、集成使用

  4.1、与SpringBoot集成
    https://docs.camunda.org/manual/latest/user-guide/spring-boot-integration/version-compatibility/

五、参考系统
  https://gitee.com/glorylion/pointlion-oa - 点狮OA
  https://aizuda.com/home - 爱组搭

