git stash 的应用
作用是保存和恢复现场
将还不想提交的但已经修改的内容进行保存至堆栈中，后续可以在某个分支上恢复出堆栈中的内容。
作用的范围包括工作区和暂存区中的内容

# 避免过多的代码merge
## 方法一
在commit代码前执行
git stash # 将没有提交的内容(工作区和暂存区)的内容保存至堆栈
git pull   # 拉取最新代码
git stash pop   # 应用到本地仓库 并删除这个 stash 堆栈
若有冲突解决冲突

## 方法二（题外话，跟git stash毛关系）
git add .
git commit -m "xxx"
git pull --rebase [origin] [分支]  # 拉取若冲突采用变基(相当于git fetch ... + git rebase ...)解决冲突(不指定--rebase时默认是--merge相当于 git fetch ... + git merge ...)

# 保存当前分支未commit修改，切换到其他分支完成bug修复后再切换到当前分支 然后恢复现场
git stash save [备注内容]                   # 保存现场
git stash list                                     # 查看存储列表
git stash apply [stash-id]                  # 恢复现场 (如果不指定stash id，将使用工作栈中最上面的 stash)
git stash pop   [stash-id]                  # 恢复现场 (如果不指定stash id，将使用工作栈中最上面的 stash) 并删除这个 stash 
git stash show [stash-id]  [-p]           # 显示 stash 差异 (如果不指定stash id，将使用工作栈中最上面的 stash；-p显示详细差异)
git stash branch <name> [stash-id] # 根据 stash  (如果不指定stash id，将使用工作栈中最上面的 stash) 创建一个新的分支，然后删除这个 stash（和 stash pop 一样）最后切换到新分支
git stash clear                                  # 删除仓库中创建的所有的 stash
git stash drop  [stash-id]                  # 删除仓库中指定 stash (如果不指定stash id，将使用工作栈中最上面的 stash)